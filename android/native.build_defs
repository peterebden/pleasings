"""Contains rules for building native Android components using the NDK.

Still a bit experimental.
"""

# The NDK toolchains don't seem to follow a very consistent naming scheme.
# This maps the shorter arch name to longer ones (sometimes triples, sometimes not).
_NDK_TOOLCHAIN_ARCHS = {
    'arm': 'arm-linux-androideabi',
    'arm64': 'aarch64-linux-android',
    'mips': 'mipsel-linux-android',
    'mips64': 'mips64el-linux-android',
    'x86': 'x86',
    'x86_64': 'x86_64',
}

_NDK_TOOLCHAIN_ABIS = {
    'arm': 'armeabi-v7a',  # There is also armeabi, but does anyone target that these days?
    'arm64': 'arm64-v8a',
    'mips': 'mips',
    'mip64': 'mip64',
    'x86': 'x86',
    'x86_64': 'x86_64',
}


def ndk_toolchain(arch, version, platform, root=None, stl='gnu-libstdc++',
                  cflags=None):
    """Sets up the current package to use a particular NDK version.

    This is a shorthand for calling package() with a bunch of parameters;
    it takes care of finding the appropriate tools and setting all the different
    config params.

    Note that this must be called at the top of the BUILD file, before defining
    any rules such as ndk_library etc.
    It will globally affect the package so cc_library rules etc will also
    collect some of these values.

    Args:
      arch (str): Architecture to target, e.g. x86_64, arm, etc.
      version (str): Version of the NDK to use, e.g. 4.9
      platform (str): Android platform to target, e.g. android-26.
      root (str): Root of the NDK. Defaults to /ndk-bundle under ANDROID_HOME as
                  defined elsewhere in the config.
      stl (str): Name of the C++ STL to use. Defaults to gnu-libstdc++ but there
                 are several other options installed (llvm-libc++, stlport, etc).
      cflags (list): Additional compiler flags. These are appended to the existing defaults.
    """
    check_config('ANDROID_HOME', example='/opt/android', rule='Android')
    if arch not in _NDK_TOOLCHAIN_ARCHS:
        raise ParseError('Unknown architecture %s. Must be one of %s' %
                         (arch, ', '.join(_NDK_TOOLCHAIN_ARCHS)))

    toolchain_arch = _NDK_TOOLCHAIN_ARCHS[arch]
    abi = _NDK_TOOLCHAIN_ABIS[arch]
    root = root or join_path(CONFIG.ANDROID_HOME, 'ndk-bundle')
    toolchain_root = join_path(root, 'toolchains', toolchain_arch + '-' + version,
                               'prebuilt/%s-%s' % (CONFIG.OS, CONFIG.ARCH.replace('amd64', 'x86_64')), 'bin')
    platform_root = join_path(root, 'platforms', platform, 'arch-' + arch)
    stl_root = join_path(root, 'sources/cxx-stl', stl, version)
    cflags = ' ' + ' '.join(cflags or [])
    cflags += ' -I %s/usr/include -L %s/usr/lib' % (platform_root, platform_root)
    cppflags = cflags + ' -I %s/include -I %s/libs/%s/include' % (stl_root, stl_root, abi)
    package(
        cc_tool = join_path(toolchain_root, toolchain_arch + '-gcc'),
        cpp_tool = join_path(toolchain_root, toolchain_arch + '-g++'),
        ar_tool = join_path(toolchain_root, toolchain_arch + '-ar'),
        ld_tool = join_path(toolchain_root, toolchain_arch + '-ld'),
        asm_tool = join_path(toolchain_root, toolchain_arch + '-as'),
        default_dbg_cflags = CONFIG.DEFAULT_DBG_CFLAGS + cflags,
        default_opt_cflags = CONFIG.DEFAULT_OPT_CFLAGS + cflags,
        default_dbg_cppflags = CONFIG.DEFAULT_DBG_CPPFLAGS + cppflags,
        default_opt_cppflags = CONFIG.DEFAULT_OPT_CPPFLAGS + cppflags,
    )


# Right now these are just aliases, later they might get more personality
# of their own.
# Unsure if there is any real point doing ndk_binary.
ndk_library = cc_library
ndk_shared_object = cc_shared_object
