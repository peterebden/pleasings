subinclude('//remote')

def yarn_library(name, version, out=None, hashes=None, test_only=False, visibility=None, deps=None):
    """Install a third-party library from the Yarn registry.

    The typical workflow for this is to use Yarn to set up your package.json and yarn.lock,
    then feed it through yarn_deps.py to generate the appropriate BUILD rules.
    Right now deps have to be installed with --flat, this rule can't generate nested node_modules
    directories.

    It's not required to check in the Yarn files; you can regenerate them using
    plz query print //third_party/js:all -f labels | grep yarn: | cut -c 6- | xargs yarn add
    but of course you may prefer to check them in if you're following a normal Yarn workflow too.

    Args:
      name (str): Name of the rule.
      version (str): Version of the package to install.
      outs (str): Output name for this package. Defaults to name.
      hashes (list): List of hashes that outputs must match.
      test_only (bool): If True, can only be depended on by test rules.
      visibility (list): Visibility declaration for this rule.
      deps (list): Any other dependencies of the rule.
    """
    # Temp hack to get this working on a plane.
    #system_library(
    #    name = name + '_sys',
    #    srcs = ['/var/tmp/yarn/npm-%s-%s' % (name, version)],
    #)
    #
    #return build_rule(
    #    name = name,
    #    srcs = [':%s_sys' % name],
    #    outs = [name],
    #    cmd = 'mv $SRCS $OUT',
    #    output_is_complete = False,
    #    visibility = visibility,
    #    exported_deps = deps,  # Assume we always need them all to be exported.
    #    labels = ['yarn:%s@%s' % (name, version)],
    #)



    url = 'https://registry.yarnpkg.com/%s/-/%s-%s.tgz' % (name, name, version)
    return build_rule(
        name = name,
        cmd = 'echo "Fetching %s..." && curl -fsSL %s | tar -xz && mv package $OUT' % (url, url),
        outs = [out or name],
        hashes = hashes,
        test_only = test_only,
        building_description = 'Downloading...',
        output_is_complete = False,
        visibility = visibility,
        exported_deps = deps,  # Assume we always need them all to be exported.
        labels = ['yarn:%s@%s' % (name, version)],
    )
